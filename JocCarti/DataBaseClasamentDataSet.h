#pragma once

#using <mscorlib.dll>
#using <System.dll>
#using <System.Data.dll>
#using <System.Xml.dll>
#using <System.Data.dll>

using namespace System::Security::Permissions;
[assembly:SecurityPermissionAttribute(SecurityAction::RequestMinimum, SkipVerification=false)];
// 
// This source code was auto-generated by xsd, Version=4.0.30319.33440.
// 
ref class DataBaseClasamentDataSet;
namespace DataBaseClasamentDataSetTableAdapters {
    ref class ClasamentTableAdapter;
}
// 
// This source code was auto-generated by xsd, Version=4.0.30319.33440.
// 
using namespace System;
ref class DataBaseClasamentDataSet;


/// <summary>
///Represents a strongly typed in-memory cache of data.
///</summary>
[System::Serializable, 
System::ComponentModel::DesignerCategoryAttribute(L"code"), 
System::ComponentModel::ToolboxItem(true), 
System::Xml::Serialization::XmlSchemaProviderAttribute(L"GetTypedDataSetSchema"), 
System::Xml::Serialization::XmlRootAttribute(L"DataBaseClasamentDataSet"), 
System::ComponentModel::Design::HelpKeywordAttribute(L"vs.data.DataSet")]
public ref class DataBaseClasamentDataSet : public ::System::Data::DataSet {
    public : ref class ClasamentDataTable;
    public : ref class ClasamentRow;
    public : ref class ClasamentRowChangeEvent;
    
    private: DataBaseClasamentDataSet::ClasamentDataTable^  tableClasament;
    
    private: ::System::Data::SchemaSerializationMode _schemaSerializationMode;
    
    public : [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    delegate System::Void ClasamentRowChangeEventHandler(::System::Object^  sender, DataBaseClasamentDataSet::ClasamentRowChangeEvent^  e);
    
    public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    DataBaseClasamentDataSet();
    protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    DataBaseClasamentDataSet(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context);
    public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
    System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
    System::ComponentModel::Browsable(false), 
    System::ComponentModel::DesignerSerializationVisibility(::System::ComponentModel::DesignerSerializationVisibility::Content)]
    property DataBaseClasamentDataSet::ClasamentDataTable^  Clasament {
        DataBaseClasamentDataSet::ClasamentDataTable^  get();
    }
    
    public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
    System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
    System::ComponentModel::BrowsableAttribute(true), 
    System::ComponentModel::DesignerSerializationVisibilityAttribute(::System::ComponentModel::DesignerSerializationVisibility::Visible)]
    virtual property ::System::Data::SchemaSerializationMode SchemaSerializationMode {
        ::System::Data::SchemaSerializationMode get() override;
        System::Void set(::System::Data::SchemaSerializationMode value) override;
    }
    
    public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
    System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
    System::ComponentModel::DesignerSerializationVisibilityAttribute(::System::ComponentModel::DesignerSerializationVisibility::Hidden)]
    property ::System::Data::DataTableCollection^  Tables {
        ::System::Data::DataTableCollection^  get() new;
    }
    
    public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
    System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
    System::ComponentModel::DesignerSerializationVisibilityAttribute(::System::ComponentModel::DesignerSerializationVisibility::Hidden)]
    property ::System::Data::DataRelationCollection^  Relations {
        ::System::Data::DataRelationCollection^  get() new;
    }
    
    protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    virtual ::System::Void InitializeDerivedDataSet() override;
    
    public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    virtual ::System::Data::DataSet^  Clone() override;
    
    protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    virtual ::System::Boolean ShouldSerializeTables() override;
    
    protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    virtual ::System::Boolean ShouldSerializeRelations() override;
    
    protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    virtual ::System::Void ReadXmlSerializable(::System::Xml::XmlReader^  reader) override;
    
    protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    virtual ::System::Xml::Schema::XmlSchema^  GetSchemaSerializable() override;
    
    internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    ::System::Void InitVars();
    
    internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    ::System::Void InitVars(::System::Boolean initTable);
    
    private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    ::System::Void InitClass();
    
    private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    ::System::Boolean ShouldSerializeClasament();
    
    private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    ::System::Void SchemaChanged(::System::Object^  sender, ::System::ComponentModel::CollectionChangeEventArgs^  e);
    
    public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    static ::System::Xml::Schema::XmlSchemaComplexType^  GetTypedDataSetSchema(::System::Xml::Schema::XmlSchemaSet^  xs);
    
    public : /// <summary>
///Represents the strongly named DataTable class.
///</summary>
    [System::Serializable, 
    System::Xml::Serialization::XmlSchemaProviderAttribute(L"GetTypedTableSchema")]
    ref class ClasamentDataTable : public ::System::Data::DataTable, public ::System::Collections::IEnumerable {
        
        private: ::System::Data::DataColumn^  columnId;
        
        private: ::System::Data::DataColumn^  columnNAME;
        
        private: ::System::Data::DataColumn^  columnSCORE;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event DataBaseClasamentDataSet::ClasamentRowChangeEventHandler^  ClasamentRowChanging;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event DataBaseClasamentDataSet::ClasamentRowChangeEventHandler^  ClasamentRowChanged;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event DataBaseClasamentDataSet::ClasamentRowChangeEventHandler^  ClasamentRowDeleting;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event DataBaseClasamentDataSet::ClasamentRowChangeEventHandler^  ClasamentRowDeleted;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ClasamentDataTable();
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ClasamentDataTable(::System::Data::DataTable^  table);
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ClasamentDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  IdColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  NAMEColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  SCOREColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
        System::ComponentModel::Browsable(false)]
        property ::System::Int32 Count {
            ::System::Int32 get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property DataBaseClasamentDataSet::ClasamentRow^  default [::System::Int32 ] {
            DataBaseClasamentDataSet::ClasamentRow^  get(::System::Int32 index);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void AddClasamentRow(DataBaseClasamentDataSet::ClasamentRow^  row);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        DataBaseClasamentDataSet::ClasamentRow^  AddClasamentRow(System::String^  NAME, System::Int32 SCORE);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        DataBaseClasamentDataSet::ClasamentRow^  FindById(System::Int32 Id);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Collections::IEnumerator^  GetEnumerator();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataTable^  Clone() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataTable^  CreateInstance() override;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void InitVars();
        
        private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void InitClass();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        DataBaseClasamentDataSet::ClasamentRow^  NewClasamentRow();
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataRow^  NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Type^  GetRowType() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) override;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void RemoveClasamentRow(DataBaseClasamentDataSet::ClasamentRow^  row);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        static ::System::Xml::Schema::XmlSchemaComplexType^  GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs);
    };
    
    public : /// <summary>
///Represents strongly named DataRow class.
///</summary>
    ref class ClasamentRow : public ::System::Data::DataRow {
        
        private: DataBaseClasamentDataSet::ClasamentDataTable^  tableClasament;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ClasamentRow(::System::Data::DataRowBuilder^  rb);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int32 Id {
            System::Int32 get();
            System::Void set(System::Int32 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::String^  NAME {
            System::String^  get();
            System::Void set(System::String^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int32 SCORE {
            System::Int32 get();
            System::Void set(System::Int32 value);
        }
    };
    
    public : /// <summary>
///Row event argument class
///</summary>
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    ref class ClasamentRowChangeEvent : public ::System::EventArgs {
        
        private: DataBaseClasamentDataSet::ClasamentRow^  eventRow;
        
        private: ::System::Data::DataRowAction eventAction;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ClasamentRowChangeEvent(DataBaseClasamentDataSet::ClasamentRow^  row, ::System::Data::DataRowAction action);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property DataBaseClasamentDataSet::ClasamentRow^  Row {
            DataBaseClasamentDataSet::ClasamentRow^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataRowAction Action {
            ::System::Data::DataRowAction get();
        }
    };
};


inline DataBaseClasamentDataSet::DataBaseClasamentDataSet() {
    this->BeginInit();
    this->InitClass();
    ::System::ComponentModel::CollectionChangeEventHandler^  schemaChangedHandler = gcnew ::System::ComponentModel::CollectionChangeEventHandler(this, &DataBaseClasamentDataSet::SchemaChanged);
    __super::Tables->CollectionChanged += schemaChangedHandler;
    __super::Relations->CollectionChanged += schemaChangedHandler;
    this->EndInit();
}

inline DataBaseClasamentDataSet::DataBaseClasamentDataSet(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context) : 
        ::System::Data::DataSet(info, context, false) {
    if (this->IsBinarySerialized(info, context) == true) {
        this->InitVars(false);
        ::System::ComponentModel::CollectionChangeEventHandler^  schemaChangedHandler1 = gcnew ::System::ComponentModel::CollectionChangeEventHandler(this, &DataBaseClasamentDataSet::SchemaChanged);
        this->Tables->CollectionChanged += schemaChangedHandler1;
        this->Relations->CollectionChanged += schemaChangedHandler1;
        return;
    }
    ::System::String^  strSchema = (cli::safe_cast<::System::String^  >(info->GetValue(L"XmlSchema", ::System::String::typeid)));
    if (this->DetermineSchemaSerializationMode(info, context) == ::System::Data::SchemaSerializationMode::IncludeSchema) {
        ::System::Data::DataSet^  ds = (gcnew ::System::Data::DataSet());
        ds->ReadXmlSchema((gcnew ::System::Xml::XmlTextReader((gcnew ::System::IO::StringReader(strSchema)))));
        if (ds->Tables[L"Clasament"] != nullptr) {
            __super::Tables->Add((gcnew DataBaseClasamentDataSet::ClasamentDataTable(ds->Tables[L"Clasament"])));
        }
        this->DataSetName = ds->DataSetName;
        this->Prefix = ds->Prefix;
        this->Namespace = ds->Namespace;
        this->Locale = ds->Locale;
        this->CaseSensitive = ds->CaseSensitive;
        this->EnforceConstraints = ds->EnforceConstraints;
        this->Merge(ds, false, ::System::Data::MissingSchemaAction::Add);
        this->InitVars();
    }
    else {
        this->ReadXmlSchema((gcnew ::System::Xml::XmlTextReader((gcnew ::System::IO::StringReader(strSchema)))));
    }
    this->GetSerializationData(info, context);
    ::System::ComponentModel::CollectionChangeEventHandler^  schemaChangedHandler = gcnew ::System::ComponentModel::CollectionChangeEventHandler(this, &DataBaseClasamentDataSet::SchemaChanged);
    __super::Tables->CollectionChanged += schemaChangedHandler;
    this->Relations->CollectionChanged += schemaChangedHandler;
}

inline DataBaseClasamentDataSet::ClasamentDataTable^  DataBaseClasamentDataSet::Clasament::get() {
    return this->tableClasament;
}

inline ::System::Data::SchemaSerializationMode DataBaseClasamentDataSet::SchemaSerializationMode::get() {
    return this->_schemaSerializationMode;
}
inline System::Void DataBaseClasamentDataSet::SchemaSerializationMode::set(::System::Data::SchemaSerializationMode value) {
    this->_schemaSerializationMode = __identifier(value);
}

inline ::System::Data::DataTableCollection^  DataBaseClasamentDataSet::Tables::get() {
    return __super::Tables;
}

inline ::System::Data::DataRelationCollection^  DataBaseClasamentDataSet::Relations::get() {
    return __super::Relations;
}

inline ::System::Void DataBaseClasamentDataSet::InitializeDerivedDataSet() {
    this->BeginInit();
    this->InitClass();
    this->EndInit();
}

inline ::System::Data::DataSet^  DataBaseClasamentDataSet::Clone() {
    DataBaseClasamentDataSet^  cln = (cli::safe_cast<DataBaseClasamentDataSet^  >(__super::Clone()));
    cln->InitVars();
    cln->SchemaSerializationMode = this->SchemaSerializationMode;
    return cln;
}

inline ::System::Boolean DataBaseClasamentDataSet::ShouldSerializeTables() {
    return false;
}

inline ::System::Boolean DataBaseClasamentDataSet::ShouldSerializeRelations() {
    return false;
}

inline ::System::Void DataBaseClasamentDataSet::ReadXmlSerializable(::System::Xml::XmlReader^  reader) {
    if (this->DetermineSchemaSerializationMode(reader) == ::System::Data::SchemaSerializationMode::IncludeSchema) {
        this->Reset();
        ::System::Data::DataSet^  ds = (gcnew ::System::Data::DataSet());
        ds->ReadXml(reader);
        if (ds->Tables[L"Clasament"] != nullptr) {
            __super::Tables->Add((gcnew DataBaseClasamentDataSet::ClasamentDataTable(ds->Tables[L"Clasament"])));
        }
        this->DataSetName = ds->DataSetName;
        this->Prefix = ds->Prefix;
        this->Namespace = ds->Namespace;
        this->Locale = ds->Locale;
        this->CaseSensitive = ds->CaseSensitive;
        this->EnforceConstraints = ds->EnforceConstraints;
        this->Merge(ds, false, ::System::Data::MissingSchemaAction::Add);
        this->InitVars();
    }
    else {
        this->ReadXml(reader);
        this->InitVars();
    }
}

inline ::System::Xml::Schema::XmlSchema^  DataBaseClasamentDataSet::GetSchemaSerializable() {
    ::System::IO::MemoryStream^  stream = (gcnew ::System::IO::MemoryStream());
    this->WriteXmlSchema((gcnew ::System::Xml::XmlTextWriter(stream, nullptr)));
    stream->Position = 0;
    return ::System::Xml::Schema::XmlSchema::Read((gcnew ::System::Xml::XmlTextReader(stream)), nullptr);
}

inline ::System::Void DataBaseClasamentDataSet::InitVars() {
    this->InitVars(true);
}

inline ::System::Void DataBaseClasamentDataSet::InitVars(::System::Boolean initTable) {
    this->tableClasament = (cli::safe_cast<DataBaseClasamentDataSet::ClasamentDataTable^  >(__super::Tables[L"Clasament"]));
    if (initTable == true) {
        if (this->tableClasament != nullptr) {
            this->tableClasament->InitVars();
        }
    }
}

inline ::System::Void DataBaseClasamentDataSet::InitClass() {
    this->DataSetName = L"DataBaseClasamentDataSet";
    this->Prefix = L"";
    this->Namespace = L"http://tempuri.org/DataBaseClasamentDataSet.xsd";
    this->EnforceConstraints = true;
    this->SchemaSerializationMode = ::System::Data::SchemaSerializationMode::IncludeSchema;
    this->tableClasament = (gcnew DataBaseClasamentDataSet::ClasamentDataTable());
    __super::Tables->Add(this->tableClasament);
}

inline ::System::Boolean DataBaseClasamentDataSet::ShouldSerializeClasament() {
    return false;
}

inline ::System::Void DataBaseClasamentDataSet::SchemaChanged(::System::Object^  sender, ::System::ComponentModel::CollectionChangeEventArgs^  e) {
    if (e->Action == ::System::ComponentModel::CollectionChangeAction::Remove) {
        this->InitVars();
    }
}

inline ::System::Xml::Schema::XmlSchemaComplexType^  DataBaseClasamentDataSet::GetTypedDataSetSchema(::System::Xml::Schema::XmlSchemaSet^  xs) {
    DataBaseClasamentDataSet^  ds = (gcnew DataBaseClasamentDataSet());
    ::System::Xml::Schema::XmlSchemaComplexType^  type = (gcnew ::System::Xml::Schema::XmlSchemaComplexType());
    ::System::Xml::Schema::XmlSchemaSequence^  sequence = (gcnew ::System::Xml::Schema::XmlSchemaSequence());
    ::System::Xml::Schema::XmlSchemaAny^  any = (gcnew ::System::Xml::Schema::XmlSchemaAny());
    any->Namespace = ds->Namespace;
    sequence->Items->Add(any);
    type->Particle = sequence;
    ::System::Xml::Schema::XmlSchema^  dsSchema = ds->GetSchemaSerializable();
    if (xs->Contains(dsSchema->TargetNamespace)) {
        ::System::IO::MemoryStream^  s1 = (gcnew ::System::IO::MemoryStream());
        ::System::IO::MemoryStream^  s2 = (gcnew ::System::IO::MemoryStream());
        try {
            ::System::Xml::Schema::XmlSchema^  schema = nullptr;
            dsSchema->Write(s1);
            for (            ::System::Collections::IEnumerator^  schemas = xs->Schemas(dsSchema->TargetNamespace)->GetEnumerator(); schemas->MoveNext();             ) {
                schema = (cli::safe_cast<::System::Xml::Schema::XmlSchema^  >(schemas->Current));
                s2->SetLength(0);
                schema->Write(s2);
                if (s1->Length == s2->Length) {
                    s1->Position = 0;
                    s2->Position = 0;
                    for (                    ; ((s1->Position != s1->Length) 
                                && (s1->ReadByte() == s2->ReadByte()));                     ) {
                        ;
                    }
                    if (s1->Position == s1->Length) {
                        return type;
                    }
                }
            }
        }
        finally {
            if (s1 != nullptr) {
                s1->Close();
            }
            if (s2 != nullptr) {
                s2->Close();
            }
        }
    }
    xs->Add(dsSchema);
    return type;
}


inline DataBaseClasamentDataSet::ClasamentDataTable::ClasamentDataTable() {
    this->TableName = L"Clasament";
    this->BeginInit();
    this->InitClass();
    this->EndInit();
}

inline DataBaseClasamentDataSet::ClasamentDataTable::ClasamentDataTable(::System::Data::DataTable^  table) {
    this->TableName = table->TableName;
    if (table->CaseSensitive != table->DataSet->CaseSensitive) {
        this->CaseSensitive = table->CaseSensitive;
    }
    if (table->Locale->ToString() != table->DataSet->Locale->ToString()) {
        this->Locale = table->Locale;
    }
    if (table->Namespace != table->DataSet->Namespace) {
        this->Namespace = table->Namespace;
    }
    this->Prefix = table->Prefix;
    this->MinimumCapacity = table->MinimumCapacity;
}

inline DataBaseClasamentDataSet::ClasamentDataTable::ClasamentDataTable(::System::Runtime::Serialization::SerializationInfo^  info, 
            ::System::Runtime::Serialization::StreamingContext context) : 
        ::System::Data::DataTable(info, context) {
    this->InitVars();
}

inline ::System::Data::DataColumn^  DataBaseClasamentDataSet::ClasamentDataTable::IdColumn::get() {
    return this->columnId;
}

inline ::System::Data::DataColumn^  DataBaseClasamentDataSet::ClasamentDataTable::NAMEColumn::get() {
    return this->columnNAME;
}

inline ::System::Data::DataColumn^  DataBaseClasamentDataSet::ClasamentDataTable::SCOREColumn::get() {
    return this->columnSCORE;
}

inline ::System::Int32 DataBaseClasamentDataSet::ClasamentDataTable::Count::get() {
    return this->Rows->Count;
}

inline DataBaseClasamentDataSet::ClasamentRow^  DataBaseClasamentDataSet::ClasamentDataTable::default::get(::System::Int32 index) {
    return (cli::safe_cast<DataBaseClasamentDataSet::ClasamentRow^  >(this->Rows[index]));
}

inline ::System::Void DataBaseClasamentDataSet::ClasamentDataTable::AddClasamentRow(DataBaseClasamentDataSet::ClasamentRow^  row) {
    this->Rows->Add(row);
}

inline DataBaseClasamentDataSet::ClasamentRow^  DataBaseClasamentDataSet::ClasamentDataTable::AddClasamentRow(System::String^  NAME, 
            System::Int32 SCORE) {
    DataBaseClasamentDataSet::ClasamentRow^  rowClasamentRow = (cli::safe_cast<DataBaseClasamentDataSet::ClasamentRow^  >(this->NewRow()));
    cli::array< ::System::Object^  >^  columnValuesArray = gcnew cli::array< ::System::Object^  >(3) {nullptr, NAME, SCORE};
    rowClasamentRow->ItemArray = columnValuesArray;
    this->Rows->Add(rowClasamentRow);
    return rowClasamentRow;
}

inline DataBaseClasamentDataSet::ClasamentRow^  DataBaseClasamentDataSet::ClasamentDataTable::FindById(System::Int32 Id) {
    return (cli::safe_cast<DataBaseClasamentDataSet::ClasamentRow^  >(this->Rows->Find(gcnew cli::array< System::Object^  >(1) {Id})));
}

inline ::System::Collections::IEnumerator^  DataBaseClasamentDataSet::ClasamentDataTable::GetEnumerator() {
    return this->Rows->GetEnumerator();
}

inline ::System::Data::DataTable^  DataBaseClasamentDataSet::ClasamentDataTable::Clone() {
    DataBaseClasamentDataSet::ClasamentDataTable^  cln = (cli::safe_cast<DataBaseClasamentDataSet::ClasamentDataTable^  >(__super::Clone()));
    cln->InitVars();
    return cln;
}

inline ::System::Data::DataTable^  DataBaseClasamentDataSet::ClasamentDataTable::CreateInstance() {
    return (gcnew DataBaseClasamentDataSet::ClasamentDataTable());
}

inline ::System::Void DataBaseClasamentDataSet::ClasamentDataTable::InitVars() {
    this->columnId = __super::Columns[L"Id"];
    this->columnNAME = __super::Columns[L"NAME"];
    this->columnSCORE = __super::Columns[L"SCORE"];
}

inline ::System::Void DataBaseClasamentDataSet::ClasamentDataTable::InitClass() {
    this->columnId = (gcnew ::System::Data::DataColumn(L"Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Element));
    __super::Columns->Add(this->columnId);
    this->columnNAME = (gcnew ::System::Data::DataColumn(L"NAME", ::System::String::typeid, nullptr, ::System::Data::MappingType::Element));
    __super::Columns->Add(this->columnNAME);
    this->columnSCORE = (gcnew ::System::Data::DataColumn(L"SCORE", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Element));
    __super::Columns->Add(this->columnSCORE);
    this->Constraints->Add((gcnew ::System::Data::UniqueConstraint(L"Constraint1", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->columnId}, 
            true)));
    this->columnId->AutoIncrement = true;
    this->columnId->AutoIncrementSeed = -1;
    this->columnId->AutoIncrementStep = -1;
    this->columnId->AllowDBNull = false;
    this->columnId->ReadOnly = true;
    this->columnId->Unique = true;
    this->columnNAME->AllowDBNull = false;
    this->columnNAME->MaxLength = 50;
    this->columnSCORE->AllowDBNull = false;
}

inline DataBaseClasamentDataSet::ClasamentRow^  DataBaseClasamentDataSet::ClasamentDataTable::NewClasamentRow() {
    return (cli::safe_cast<DataBaseClasamentDataSet::ClasamentRow^  >(this->NewRow()));
}

inline ::System::Data::DataRow^  DataBaseClasamentDataSet::ClasamentDataTable::NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) {
    return (gcnew DataBaseClasamentDataSet::ClasamentRow(builder));
}

inline ::System::Type^  DataBaseClasamentDataSet::ClasamentDataTable::GetRowType() {
    return DataBaseClasamentDataSet::ClasamentRow::typeid;
}

inline ::System::Void DataBaseClasamentDataSet::ClasamentDataTable::OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowChanged(e);
    {
        this->ClasamentRowChanged(this, (gcnew DataBaseClasamentDataSet::ClasamentRowChangeEvent((cli::safe_cast<DataBaseClasamentDataSet::ClasamentRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void DataBaseClasamentDataSet::ClasamentDataTable::OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowChanging(e);
    {
        this->ClasamentRowChanging(this, (gcnew DataBaseClasamentDataSet::ClasamentRowChangeEvent((cli::safe_cast<DataBaseClasamentDataSet::ClasamentRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void DataBaseClasamentDataSet::ClasamentDataTable::OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowDeleted(e);
    {
        this->ClasamentRowDeleted(this, (gcnew DataBaseClasamentDataSet::ClasamentRowChangeEvent((cli::safe_cast<DataBaseClasamentDataSet::ClasamentRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void DataBaseClasamentDataSet::ClasamentDataTable::OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowDeleting(e);
    {
        this->ClasamentRowDeleting(this, (gcnew DataBaseClasamentDataSet::ClasamentRowChangeEvent((cli::safe_cast<DataBaseClasamentDataSet::ClasamentRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void DataBaseClasamentDataSet::ClasamentDataTable::RemoveClasamentRow(DataBaseClasamentDataSet::ClasamentRow^  row) {
    this->Rows->Remove(row);
}

inline ::System::Xml::Schema::XmlSchemaComplexType^  DataBaseClasamentDataSet::ClasamentDataTable::GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs) {
    ::System::Xml::Schema::XmlSchemaComplexType^  type = (gcnew ::System::Xml::Schema::XmlSchemaComplexType());
    ::System::Xml::Schema::XmlSchemaSequence^  sequence = (gcnew ::System::Xml::Schema::XmlSchemaSequence());
    DataBaseClasamentDataSet^  ds = (gcnew DataBaseClasamentDataSet());
    ::System::Xml::Schema::XmlSchemaAny^  any1 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
    any1->Namespace = L"http://www.w3.org/2001/XMLSchema";
    any1->MinOccurs = ::System::Decimal(0);
    any1->MaxOccurs = ::System::Decimal::MaxValue;
    any1->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
    sequence->Items->Add(any1);
    ::System::Xml::Schema::XmlSchemaAny^  any2 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
    any2->Namespace = L"urn:schemas-microsoft-com:xml-diffgram-v1";
    any2->MinOccurs = ::System::Decimal(1);
    any2->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
    sequence->Items->Add(any2);
    ::System::Xml::Schema::XmlSchemaAttribute^  attribute1 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
    attribute1->Name = L"namespace";
    attribute1->FixedValue = ds->Namespace;
    type->Attributes->Add(attribute1);
    ::System::Xml::Schema::XmlSchemaAttribute^  attribute2 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
    attribute2->Name = L"tableTypeName";
    attribute2->FixedValue = L"ClasamentDataTable";
    type->Attributes->Add(attribute2);
    type->Particle = sequence;
    ::System::Xml::Schema::XmlSchema^  dsSchema = ds->GetSchemaSerializable();
    if (xs->Contains(dsSchema->TargetNamespace)) {
        ::System::IO::MemoryStream^  s1 = (gcnew ::System::IO::MemoryStream());
        ::System::IO::MemoryStream^  s2 = (gcnew ::System::IO::MemoryStream());
        try {
            ::System::Xml::Schema::XmlSchema^  schema = nullptr;
            dsSchema->Write(s1);
            for (            ::System::Collections::IEnumerator^  schemas = xs->Schemas(dsSchema->TargetNamespace)->GetEnumerator(); schemas->MoveNext();             ) {
                schema = (cli::safe_cast<::System::Xml::Schema::XmlSchema^  >(schemas->Current));
                s2->SetLength(0);
                schema->Write(s2);
                if (s1->Length == s2->Length) {
                    s1->Position = 0;
                    s2->Position = 0;
                    for (                    ; ((s1->Position != s1->Length) 
                                && (s1->ReadByte() == s2->ReadByte()));                     ) {
                        ;
                    }
                    if (s1->Position == s1->Length) {
                        return type;
                    }
                }
            }
        }
        finally {
            if (s1 != nullptr) {
                s1->Close();
            }
            if (s2 != nullptr) {
                s2->Close();
            }
        }
    }
    xs->Add(dsSchema);
    return type;
}


inline DataBaseClasamentDataSet::ClasamentRow::ClasamentRow(::System::Data::DataRowBuilder^  rb) : 
        ::System::Data::DataRow(rb) {
    this->tableClasament = (cli::safe_cast<DataBaseClasamentDataSet::ClasamentDataTable^  >(this->Table));
}

inline System::Int32 DataBaseClasamentDataSet::ClasamentRow::Id::get() {
    return (cli::safe_cast<::System::Int32 >(this[this->tableClasament->IdColumn]));
}
inline System::Void DataBaseClasamentDataSet::ClasamentRow::Id::set(System::Int32 value) {
    this[this->tableClasament->IdColumn] = value;
}

inline System::String^  DataBaseClasamentDataSet::ClasamentRow::NAME::get() {
    return (cli::safe_cast<::System::String^  >(this[this->tableClasament->NAMEColumn]));
}
inline System::Void DataBaseClasamentDataSet::ClasamentRow::NAME::set(System::String^  value) {
    this[this->tableClasament->NAMEColumn] = value;
}

inline System::Int32 DataBaseClasamentDataSet::ClasamentRow::SCORE::get() {
    return (cli::safe_cast<::System::Int32 >(this[this->tableClasament->SCOREColumn]));
}
inline System::Void DataBaseClasamentDataSet::ClasamentRow::SCORE::set(System::Int32 value) {
    this[this->tableClasament->SCOREColumn] = value;
}


inline DataBaseClasamentDataSet::ClasamentRowChangeEvent::ClasamentRowChangeEvent(DataBaseClasamentDataSet::ClasamentRow^  row, 
            ::System::Data::DataRowAction action) {
    this->eventRow = row;
    this->eventAction = action;
}

inline DataBaseClasamentDataSet::ClasamentRow^  DataBaseClasamentDataSet::ClasamentRowChangeEvent::Row::get() {
    return this->eventRow;
}

inline ::System::Data::DataRowAction DataBaseClasamentDataSet::ClasamentRowChangeEvent::Action::get() {
    return this->eventAction;
}
namespace DataBaseClasamentDataSetTableAdapters {
    using namespace System;
    ref class ClasamentTableAdapter;
    
    
    /// <summary>
///Represents the connection and commands used to retrieve and save data.
///</summary>
    [System::ComponentModel::DesignerCategoryAttribute(L"code"), 
    System::ComponentModel::ToolboxItem(true), 
    System::ComponentModel::DataObjectAttribute(true), 
    System::ComponentModel::DesignerAttribute(L"Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" 
L", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"), 
    System::ComponentModel::Design::HelpKeywordAttribute(L"vs.data.TableAdapter")]
    public ref class ClasamentTableAdapter : public ::System::ComponentModel::Component {
        
        private: ::System::Data::SqlClient::SqlDataAdapter^  _adapter;
        
        private: ::System::Data::SqlClient::SqlConnection^  _connection;
        
        private: cli::array< ::System::Data::SqlClient::SqlCommand^  >^  _commandCollection;
        
        private: ::System::Boolean _clearBeforeFill;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ClasamentTableAdapter();
        private: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::SqlClient::SqlDataAdapter^  Adapter {
            ::System::Data::SqlClient::SqlDataAdapter^  get();
        }
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::SqlClient::SqlConnection^  Connection {
            ::System::Data::SqlClient::SqlConnection^  get();
            System::Void set(::System::Data::SqlClient::SqlConnection^  value);
        }
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property cli::array< ::System::Data::SqlClient::SqlCommand^  >^  CommandCollection {
            cli::array< ::System::Data::SqlClient::SqlCommand^  >^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Boolean ClearBeforeFill {
            ::System::Boolean get();
            System::Void set(::System::Boolean value);
        }
        
        private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void InitAdapter();
        
        private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void InitConnection();
        
        private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void InitCommandCollection();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        [System::ComponentModel::Design::HelpKeywordAttribute(L"vs.data.TableAdapter")]
        [System::ComponentModel::DataObjectMethodAttribute(::System::ComponentModel::DataObjectMethodType::Fill, true)]
        virtual System::Int32 Fill(DataBaseClasamentDataSet::ClasamentDataTable^  dataTable);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        [System::ComponentModel::Design::HelpKeywordAttribute(L"vs.data.TableAdapter")]
        [System::ComponentModel::DataObjectMethodAttribute(::System::ComponentModel::DataObjectMethodType::Select, true)]
        virtual DataBaseClasamentDataSet::ClasamentDataTable^  GetData();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        [System::ComponentModel::Design::HelpKeywordAttribute(L"vs.data.TableAdapter")]
        virtual System::Int32 Update(DataBaseClasamentDataSet::ClasamentDataTable^  dataTable);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        [System::ComponentModel::Design::HelpKeywordAttribute(L"vs.data.TableAdapter")]
        virtual System::Int32 Update(DataBaseClasamentDataSet^  dataSet);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        [System::ComponentModel::Design::HelpKeywordAttribute(L"vs.data.TableAdapter")]
        virtual System::Int32 Update(::System::Data::DataRow^  dataRow);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        [System::ComponentModel::Design::HelpKeywordAttribute(L"vs.data.TableAdapter")]
        virtual System::Int32 Update(cli::array< ::System::Data::DataRow^  >^  dataRows);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        [System::ComponentModel::Design::HelpKeywordAttribute(L"vs.data.TableAdapter")]
        [System::ComponentModel::DataObjectMethodAttribute(::System::ComponentModel::DataObjectMethodType::Delete, true)]
        virtual System::Int32 Delete(System::Int32 Original_Id, System::String^  Original_NAME, System::Int32 Original_SCORE);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        [System::ComponentModel::Design::HelpKeywordAttribute(L"vs.data.TableAdapter")]
        [System::ComponentModel::DataObjectMethodAttribute(::System::ComponentModel::DataObjectMethodType::Insert, true)]
        virtual System::Int32 Insert(System::String^  NAME, System::Int32 SCORE);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        [System::ComponentModel::Design::HelpKeywordAttribute(L"vs.data.TableAdapter")]
        [System::ComponentModel::DataObjectMethodAttribute(::System::ComponentModel::DataObjectMethodType::Update, true)]
        virtual System::Int32 Update(
                    System::String^  NAME, 
                    System::Int32 SCORE, 
                    System::Int32 Original_Id, 
                    System::String^  Original_NAME, 
                    System::Int32 Original_SCORE, 
                    System::Int32 Id);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        [System::ComponentModel::Design::HelpKeywordAttribute(L"vs.data.TableAdapter")]
        [System::ComponentModel::DataObjectMethodAttribute(::System::ComponentModel::DataObjectMethodType::Update, true)]
        virtual System::Int32 Update(System::String^  NAME, System::Int32 SCORE, System::Int32 Original_Id, System::String^  Original_NAME, 
                    System::Int32 Original_SCORE);
    };
}
namespace DataBaseClasamentDataSetTableAdapters {
    
    
    inline ClasamentTableAdapter::ClasamentTableAdapter() {
        this->ClearBeforeFill = true;
    }
    
    inline ::System::Data::SqlClient::SqlDataAdapter^  ClasamentTableAdapter::Adapter::get() {
        if (this->_adapter == nullptr) {
            this->InitAdapter();
        }
        return this->_adapter;
    }
    
    inline ::System::Data::SqlClient::SqlConnection^  ClasamentTableAdapter::Connection::get() {
        if (this->_connection == nullptr) {
            this->InitConnection();
        }
        return this->_connection;
    }
    inline System::Void ClasamentTableAdapter::Connection::set(::System::Data::SqlClient::SqlConnection^  value) {
        this->_connection = __identifier(value);
        if (this->Adapter->InsertCommand != nullptr) {
            this->Adapter->InsertCommand->Connection = __identifier(value);
        }
        if (this->Adapter->DeleteCommand != nullptr) {
            this->Adapter->DeleteCommand->Connection = __identifier(value);
        }
        if (this->Adapter->UpdateCommand != nullptr) {
            this->Adapter->UpdateCommand->Connection = __identifier(value);
        }
        for (        ::System::Int32 i = 0; (i < this->CommandCollection->Length);         i = (i + 1)) {
            if (this->CommandCollection[i] != nullptr) {
                (cli::safe_cast<::System::Data::SqlClient::SqlCommand^  >(this->CommandCollection[i]))->Connection = __identifier(value);
            }
        }
    }
    
    inline cli::array< ::System::Data::SqlClient::SqlCommand^  >^  ClasamentTableAdapter::CommandCollection::get() {
        if (this->_commandCollection == nullptr) {
            this->InitCommandCollection();
        }
        return this->_commandCollection;
    }
    
    inline ::System::Boolean ClasamentTableAdapter::ClearBeforeFill::get() {
        return this->_clearBeforeFill;
    }
    inline System::Void ClasamentTableAdapter::ClearBeforeFill::set(::System::Boolean value) {
        this->_clearBeforeFill = __identifier(value);
    }
    
    inline ::System::Void ClasamentTableAdapter::InitAdapter() {
        this->_adapter = (gcnew ::System::Data::SqlClient::SqlDataAdapter());
        ::System::Data::Common::DataTableMapping^  tableMapping = (gcnew ::System::Data::Common::DataTableMapping());
        tableMapping->SourceTable = L"Table";
        tableMapping->DataSetTable = L"Clasament";
        tableMapping->ColumnMappings->Add(L"Id", L"Id");
        tableMapping->ColumnMappings->Add(L"NAME", L"NAME");
        tableMapping->ColumnMappings->Add(L"SCORE", L"SCORE");
        this->_adapter->TableMappings->Add(tableMapping);
        this->_adapter->DeleteCommand = (gcnew ::System::Data::SqlClient::SqlCommand());
        this->_adapter->DeleteCommand->Connection = this->Connection;
        this->_adapter->DeleteCommand->CommandText = L"DELETE FROM [dbo].[Clasament] WHERE (([Id] = @Original_Id) AND ([NAME] = @Origina" 
L"l_NAME) AND ([SCORE] = @Original_SCORE))";
        this->_adapter->DeleteCommand->CommandType = ::System::Data::CommandType::Text;
        this->_adapter->DeleteCommand->Parameters->Add((gcnew ::System::Data::SqlClient::SqlParameter(L"@Original_Id", ::System::Data::SqlDbType::Int, 
                0, ::System::Data::ParameterDirection::Input, 0, 0, L"Id", ::System::Data::DataRowVersion::Original, false, nullptr, 
                L"", L"", L"")));
        this->_adapter->DeleteCommand->Parameters->Add((gcnew ::System::Data::SqlClient::SqlParameter(L"@Original_NAME", ::System::Data::SqlDbType::VarChar, 
                0, ::System::Data::ParameterDirection::Input, 0, 0, L"NAME", ::System::Data::DataRowVersion::Original, false, nullptr, 
                L"", L"", L"")));
        this->_adapter->DeleteCommand->Parameters->Add((gcnew ::System::Data::SqlClient::SqlParameter(L"@Original_SCORE", ::System::Data::SqlDbType::Int, 
                0, ::System::Data::ParameterDirection::Input, 0, 0, L"SCORE", ::System::Data::DataRowVersion::Original, false, nullptr, 
                L"", L"", L"")));
        this->_adapter->InsertCommand = (gcnew ::System::Data::SqlClient::SqlCommand());
        this->_adapter->InsertCommand->Connection = this->Connection;
        this->_adapter->InsertCommand->CommandText = L"INSERT INTO [dbo].[Clasament] ([NAME], [SCORE]) VALUES (@NAME, @SCORE);\r\nSELECT I" 
L"d, NAME, SCORE FROM Clasament WHERE (Id = SCOPE_IDENTITY())";
        this->_adapter->InsertCommand->CommandType = ::System::Data::CommandType::Text;
        this->_adapter->InsertCommand->Parameters->Add((gcnew ::System::Data::SqlClient::SqlParameter(L"@NAME", ::System::Data::SqlDbType::VarChar, 
                0, ::System::Data::ParameterDirection::Input, 0, 0, L"NAME", ::System::Data::DataRowVersion::Current, false, nullptr, 
                L"", L"", L"")));
        this->_adapter->InsertCommand->Parameters->Add((gcnew ::System::Data::SqlClient::SqlParameter(L"@SCORE", ::System::Data::SqlDbType::Int, 
                0, ::System::Data::ParameterDirection::Input, 0, 0, L"SCORE", ::System::Data::DataRowVersion::Current, false, nullptr, 
                L"", L"", L"")));
        this->_adapter->UpdateCommand = (gcnew ::System::Data::SqlClient::SqlCommand());
        this->_adapter->UpdateCommand->Connection = this->Connection;
        this->_adapter->UpdateCommand->CommandText = L"UPDATE [dbo].[Clasament] SET [NAME] = @NAME, [SCORE] = @SCORE WHERE (([Id] = @Ori" 
L"ginal_Id) AND ([NAME] = @Original_NAME) AND ([SCORE] = @Original_SCORE));\r\nSELEC" 
L"T Id, NAME, SCORE FROM Clasament WHERE (Id = @Id)";
        this->_adapter->UpdateCommand->CommandType = ::System::Data::CommandType::Text;
        this->_adapter->UpdateCommand->Parameters->Add((gcnew ::System::Data::SqlClient::SqlParameter(L"@NAME", ::System::Data::SqlDbType::VarChar, 
                0, ::System::Data::ParameterDirection::Input, 0, 0, L"NAME", ::System::Data::DataRowVersion::Current, false, nullptr, 
                L"", L"", L"")));
        this->_adapter->UpdateCommand->Parameters->Add((gcnew ::System::Data::SqlClient::SqlParameter(L"@SCORE", ::System::Data::SqlDbType::Int, 
                0, ::System::Data::ParameterDirection::Input, 0, 0, L"SCORE", ::System::Data::DataRowVersion::Current, false, nullptr, 
                L"", L"", L"")));
        this->_adapter->UpdateCommand->Parameters->Add((gcnew ::System::Data::SqlClient::SqlParameter(L"@Original_Id", ::System::Data::SqlDbType::Int, 
                0, ::System::Data::ParameterDirection::Input, 0, 0, L"Id", ::System::Data::DataRowVersion::Original, false, nullptr, 
                L"", L"", L"")));
        this->_adapter->UpdateCommand->Parameters->Add((gcnew ::System::Data::SqlClient::SqlParameter(L"@Original_NAME", ::System::Data::SqlDbType::VarChar, 
                0, ::System::Data::ParameterDirection::Input, 0, 0, L"NAME", ::System::Data::DataRowVersion::Original, false, nullptr, 
                L"", L"", L"")));
        this->_adapter->UpdateCommand->Parameters->Add((gcnew ::System::Data::SqlClient::SqlParameter(L"@Original_SCORE", ::System::Data::SqlDbType::Int, 
                0, ::System::Data::ParameterDirection::Input, 0, 0, L"SCORE", ::System::Data::DataRowVersion::Original, false, nullptr, 
                L"", L"", L"")));
        this->_adapter->UpdateCommand->Parameters->Add((gcnew ::System::Data::SqlClient::SqlParameter(L"@Id", ::System::Data::SqlDbType::Int, 
                4, ::System::Data::ParameterDirection::Input, 0, 0, L"Id", ::System::Data::DataRowVersion::Current, false, nullptr, L"", 
                L"", L"")));
    }
    
    inline ::System::Void ClasamentTableAdapter::InitConnection() {
        this->_connection = (gcnew ::System::Data::SqlClient::SqlConnection());
        this->_connection->ConnectionString = ::JocCarti::Properties::Settings::Default->DataBaseClasamentConnectionString;
    }
    
    inline ::System::Void ClasamentTableAdapter::InitCommandCollection() {
        this->_commandCollection = gcnew cli::array< ::System::Data::SqlClient::SqlCommand^  >(1);
        this->_commandCollection[0] = (gcnew ::System::Data::SqlClient::SqlCommand());
        this->_commandCollection[0]->Connection = this->Connection;
        this->_commandCollection[0]->CommandText = L"SELECT Id, NAME, SCORE FROM dbo.Clasament";
        this->_commandCollection[0]->CommandType = ::System::Data::CommandType::Text;
    }
    
    inline System::Int32 ClasamentTableAdapter::Fill(DataBaseClasamentDataSet::ClasamentDataTable^  dataTable) {
        this->Adapter->SelectCommand = this->CommandCollection[0];
        if (this->ClearBeforeFill == true) {
            dataTable->Clear();
        }
        ::System::Int32 returnValue = this->Adapter->Fill(dataTable);
        return returnValue;
    }
    
    inline DataBaseClasamentDataSet::ClasamentDataTable^  ClasamentTableAdapter::GetData() {
        this->Adapter->SelectCommand = this->CommandCollection[0];
        DataBaseClasamentDataSet::ClasamentDataTable^  dataTable = (gcnew DataBaseClasamentDataSet::ClasamentDataTable());
        this->Adapter->Fill(dataTable);
        return dataTable;
    }
    
    inline System::Int32 ClasamentTableAdapter::Update(DataBaseClasamentDataSet::ClasamentDataTable^  dataTable) {
        return this->Adapter->Update(dataTable);
    }
    
    inline System::Int32 ClasamentTableAdapter::Update(DataBaseClasamentDataSet^  dataSet) {
        return this->Adapter->Update(dataSet, L"Clasament");
    }
    
    inline System::Int32 ClasamentTableAdapter::Update(::System::Data::DataRow^  dataRow) {
        return this->Adapter->Update(gcnew cli::array< ::System::Data::DataRow^  >(1) {dataRow});
    }
    
    inline System::Int32 ClasamentTableAdapter::Update(cli::array< ::System::Data::DataRow^  >^  dataRows) {
        return this->Adapter->Update(dataRows);
    }
    
    inline System::Int32 ClasamentTableAdapter::Delete(System::Int32 Original_Id, System::String^  Original_NAME, System::Int32 Original_SCORE) {
        this->Adapter->DeleteCommand->Parameters[0]->Value = static_cast<System::Int32>(Original_Id);
        if (Original_NAME == nullptr) {
            throw (gcnew ::System::ArgumentNullException(L"Original_NAME"));
        }
        else {
            this->Adapter->DeleteCommand->Parameters[1]->Value = (cli::safe_cast<System::String^  >(Original_NAME));
        }
        this->Adapter->DeleteCommand->Parameters[2]->Value = static_cast<System::Int32>(Original_SCORE);
        ::System::Data::ConnectionState previousConnectionState = this->Adapter->DeleteCommand->Connection->State;
        if ((this->Adapter->DeleteCommand->Connection->State & ::System::Data::ConnectionState::Open) 
                    != ::System::Data::ConnectionState::Open) {
            this->Adapter->DeleteCommand->Connection->Open();
        }
        try {
            ::System::Int32 returnValue = this->Adapter->DeleteCommand->ExecuteNonQuery();
            return returnValue;
        }
        finally {
            if (previousConnectionState == ::System::Data::ConnectionState::Closed) {
                this->Adapter->DeleteCommand->Connection->Close();
            }
        }
    }
    
    inline System::Int32 ClasamentTableAdapter::Insert(System::String^  NAME, System::Int32 SCORE) {
        if (NAME == nullptr) {
            throw (gcnew ::System::ArgumentNullException(L"NAME"));
        }
        else {
            this->Adapter->InsertCommand->Parameters[0]->Value = (cli::safe_cast<System::String^  >(NAME));
        }
        this->Adapter->InsertCommand->Parameters[1]->Value = static_cast<System::Int32>(SCORE);
        ::System::Data::ConnectionState previousConnectionState = this->Adapter->InsertCommand->Connection->State;
        if ((this->Adapter->InsertCommand->Connection->State & ::System::Data::ConnectionState::Open) 
                    != ::System::Data::ConnectionState::Open) {
            this->Adapter->InsertCommand->Connection->Open();
        }
        try {
            ::System::Int32 returnValue = this->Adapter->InsertCommand->ExecuteNonQuery();
            return returnValue;
        }
        finally {
            if (previousConnectionState == ::System::Data::ConnectionState::Closed) {
                this->Adapter->InsertCommand->Connection->Close();
            }
        }
    }
    
    inline System::Int32 ClasamentTableAdapter::Update(
                System::String^  NAME, 
                System::Int32 SCORE, 
                System::Int32 Original_Id, 
                System::String^  Original_NAME, 
                System::Int32 Original_SCORE, 
                System::Int32 Id) {
        if (NAME == nullptr) {
            throw (gcnew ::System::ArgumentNullException(L"NAME"));
        }
        else {
            this->Adapter->UpdateCommand->Parameters[0]->Value = (cli::safe_cast<System::String^  >(NAME));
        }
        this->Adapter->UpdateCommand->Parameters[1]->Value = static_cast<System::Int32>(SCORE);
        this->Adapter->UpdateCommand->Parameters[2]->Value = static_cast<System::Int32>(Original_Id);
        if (Original_NAME == nullptr) {
            throw (gcnew ::System::ArgumentNullException(L"Original_NAME"));
        }
        else {
            this->Adapter->UpdateCommand->Parameters[3]->Value = (cli::safe_cast<System::String^  >(Original_NAME));
        }
        this->Adapter->UpdateCommand->Parameters[4]->Value = static_cast<System::Int32>(Original_SCORE);
        this->Adapter->UpdateCommand->Parameters[5]->Value = static_cast<System::Int32>(Id);
        ::System::Data::ConnectionState previousConnectionState = this->Adapter->UpdateCommand->Connection->State;
        if ((this->Adapter->UpdateCommand->Connection->State & ::System::Data::ConnectionState::Open) 
                    != ::System::Data::ConnectionState::Open) {
            this->Adapter->UpdateCommand->Connection->Open();
        }
        try {
            ::System::Int32 returnValue = this->Adapter->UpdateCommand->ExecuteNonQuery();
            return returnValue;
        }
        finally {
            if (previousConnectionState == ::System::Data::ConnectionState::Closed) {
                this->Adapter->UpdateCommand->Connection->Close();
            }
        }
    }
    
    inline System::Int32 ClasamentTableAdapter::Update(System::String^  NAME, System::Int32 SCORE, System::Int32 Original_Id, 
                System::String^  Original_NAME, System::Int32 Original_SCORE) {
        return this->Update(NAME, SCORE, Original_Id, Original_NAME, Original_SCORE, Original_Id);
    }
}
